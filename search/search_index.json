{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Maesh: Simpler Service Mesh \u00b6 Maesh is a lightweight and simpler service mesh designed from the ground up to be straightforward, easy to install and easy to use. Built on top of Traefik, Maesh fits as your de-facto service mesh in your Kubernetes cluster supporting the latest Service Mesh Interface specification (SMI). Moreover, Maesh is opt-in by default, which means that your existing services are unaffected until you decide to add them to the mesh. Non-Invasive Service Mesh \u00b6 Maesh does not use any sidecar container but handles routing through proxy endpoints running on each node. The mesh controller runs in a dedicated pod and handles all the configuration parsing and deployment to the proxy nodes. Maesh supports multiple configuration options: annotations on user service objects, and SMI objects. Not using sidecars means that Maesh does not modify your kubernetes objects, and does not modify your traffic without your knowledge. Using the Maesh endpoints is all that is required. Prerequisites \u00b6 To run this app, you require the following: Kubernetes 1.11+ CoreDNS/KubeDNS installed as Cluster DNS Provider (versions 1.3+ supported) Helm v2 with a working tiller service account","title":"Welcome"},{"location":"#maesh-simpler-service-mesh","text":"Maesh is a lightweight and simpler service mesh designed from the ground up to be straightforward, easy to install and easy to use. Built on top of Traefik, Maesh fits as your de-facto service mesh in your Kubernetes cluster supporting the latest Service Mesh Interface specification (SMI). Moreover, Maesh is opt-in by default, which means that your existing services are unaffected until you decide to add them to the mesh.","title":"Maesh: Simpler Service Mesh"},{"location":"#non-invasive-service-mesh","text":"Maesh does not use any sidecar container but handles routing through proxy endpoints running on each node. The mesh controller runs in a dedicated pod and handles all the configuration parsing and deployment to the proxy nodes. Maesh supports multiple configuration options: annotations on user service objects, and SMI objects. Not using sidecars means that Maesh does not modify your kubernetes objects, and does not modify your traffic without your knowledge. Using the Maesh endpoints is all that is required.","title":"Non-Invasive Service Mesh"},{"location":"#prerequisites","text":"To run this app, you require the following: Kubernetes 1.11+ CoreDNS/KubeDNS installed as Cluster DNS Provider (versions 1.3+ supported) Helm v2 with a working tiller service account","title":"Prerequisites"},{"location":"configuration/","text":"Configuration \u00b6 The configuration for maesh is broken into two parts: the static configuration, and the dynamic configuration. The static configuration is configured when the maesh service mesh is installed, and is configured via the values.yaml file in the helm install. Static configuration \u00b6 The maesh image version can be manually defined if needed, as can the version for the Traefik CE mesh nodes. Debug logging can be globally enabled. The default mesh mode can be configured. If this is not set, the default mode will be HTTP. This means that new mesh services that are not specified will default to operate in HTTP mode. Tracing can be enabled. Service Mesh Interface (SMI) mode can be enabled. This configures maesh to run in SMI mode, where access and routes are explicitly enabled. Note: By default, all routes and access is denied. Please see the SMI Specification for more information Dynamic configuration \u00b6 Traffic type \u00b6 Annotations on services are the main way to configure maesh behavior. The service mode can be enabled by using the following annotation: maesh.containo.us/traffic-type: \"http\" This annotation can be set to either http or tcp , and will specify the mode for that service operation. If this annotation is not present, the mesh service will operate in the default mode specified in the static configuration. Scheme \u00b6 The scheme used to define custom scheme for request: maesh.containo.us/scheme: \"h2c\" This annotation can be set to either http or h2c and is available for maesh.containo.us/traffic-type: \"http\" . Retry \u00b6 Retries can be enabled by using the following annotation: maesh.containo.us/retry-attempts: \"2\" This annotation sets the number of retry attempts that maesh will make if a network error occurrs. Please note that this value is a string, and needs to be quoted. Circuit breaker \u00b6 Circuit breaker can be enabled by using the following annotation: maesh.containo.us/circuit-breaker-expression: \"Expression\" This annotation sets the expression for circuit breaking. The circuit breaker protects your system from stacking requests to unhealthy services (resulting in cascading failures). When your system is healthy, the circuit is closed (normal operations). When your system becomes unhealthy, the circuit opens, and requests are no longer forwarded (but handled by a fallback mechanism). All configuration options are available here","title":"Configuration"},{"location":"configuration/#configuration","text":"The configuration for maesh is broken into two parts: the static configuration, and the dynamic configuration. The static configuration is configured when the maesh service mesh is installed, and is configured via the values.yaml file in the helm install.","title":"Configuration"},{"location":"configuration/#static-configuration","text":"The maesh image version can be manually defined if needed, as can the version for the Traefik CE mesh nodes. Debug logging can be globally enabled. The default mesh mode can be configured. If this is not set, the default mode will be HTTP. This means that new mesh services that are not specified will default to operate in HTTP mode. Tracing can be enabled. Service Mesh Interface (SMI) mode can be enabled. This configures maesh to run in SMI mode, where access and routes are explicitly enabled. Note: By default, all routes and access is denied. Please see the SMI Specification for more information","title":"Static configuration"},{"location":"configuration/#dynamic-configuration","text":"","title":"Dynamic configuration"},{"location":"configuration/#traffic-type","text":"Annotations on services are the main way to configure maesh behavior. The service mode can be enabled by using the following annotation: maesh.containo.us/traffic-type: \"http\" This annotation can be set to either http or tcp , and will specify the mode for that service operation. If this annotation is not present, the mesh service will operate in the default mode specified in the static configuration.","title":"Traffic type"},{"location":"configuration/#scheme","text":"The scheme used to define custom scheme for request: maesh.containo.us/scheme: \"h2c\" This annotation can be set to either http or h2c and is available for maesh.containo.us/traffic-type: \"http\" .","title":"Scheme"},{"location":"configuration/#retry","text":"Retries can be enabled by using the following annotation: maesh.containo.us/retry-attempts: \"2\" This annotation sets the number of retry attempts that maesh will make if a network error occurrs. Please note that this value is a string, and needs to be quoted.","title":"Retry"},{"location":"configuration/#circuit-breaker","text":"Circuit breaker can be enabled by using the following annotation: maesh.containo.us/circuit-breaker-expression: \"Expression\" This annotation sets the expression for circuit breaking. The circuit breaker protects your system from stacking requests to unhealthy services (resulting in cascading failures). When your system is healthy, the circuit is closed (normal operations). When your system becomes unhealthy, the circuit opens, and requests are no longer forwarded (but handled by a fallback mechanism). All configuration options are available here","title":"Circuit breaker"},{"location":"install/","text":"Installation \u00b6 To install maesh, the installation method is quite simple: helm repo add maesh https://containous.github.io/maesh/charts helm repo update Install maesh helm chart: helm install --name=maesh --namespace=maesh maesh/maesh Install from source \u00b6 To build the image locally, run: make to build the binary and build/tag the local image. Deploy helm chart \u00b6 To deploy the helm chart, run: helm install helm/chart/maesh --namespace maesh --set controller.image.pullPolicy=IfNotPresent --set controller.image.tag=latest KubeDNS support \u00b6 Maesh can support KubeDNS helm install --name=maesh --namespace=maesh maesh/maesh --set kubedns=true With this parameter Maesh will install a CoreDNS as a daemonset. KubeDNS will be patched with stubDomains Custom cluster domain \u00b6 If you use a cluster domain other than cluster.local set it by using the clusterDomain parameter: helm install --name=maesh --namespace=maesh maesh/maesh --set clusterDomain=my.custom.domain.com Installation namespace \u00b6 Maesh does not need to be installed into the maesh namespace, but it does need to be installed into its own namespace, separate from user namespaces. Usage \u00b6 To use maesh, instead of referencing services via their normal <servicename>.<namespace> , instead use <servicename>.<namespace>.maesh . This will access the maesh service mesh, and will allow you to route requests through maesh. By default, maesh is opt-in, meaning you have to use the maesh service names to access the mesh, so you can have some services running through the mesh, and some services not.","title":"Installation"},{"location":"install/#installation","text":"To install maesh, the installation method is quite simple: helm repo add maesh https://containous.github.io/maesh/charts helm repo update Install maesh helm chart: helm install --name=maesh --namespace=maesh maesh/maesh","title":"Installation"},{"location":"install/#install-from-source","text":"To build the image locally, run: make to build the binary and build/tag the local image.","title":"Install from source"},{"location":"install/#deploy-helm-chart","text":"To deploy the helm chart, run: helm install helm/chart/maesh --namespace maesh --set controller.image.pullPolicy=IfNotPresent --set controller.image.tag=latest","title":"Deploy helm chart"},{"location":"install/#kubedns-support","text":"Maesh can support KubeDNS helm install --name=maesh --namespace=maesh maesh/maesh --set kubedns=true With this parameter Maesh will install a CoreDNS as a daemonset. KubeDNS will be patched with stubDomains","title":"KubeDNS support"},{"location":"install/#custom-cluster-domain","text":"If you use a cluster domain other than cluster.local set it by using the clusterDomain parameter: helm install --name=maesh --namespace=maesh maesh/maesh --set clusterDomain=my.custom.domain.com","title":"Custom cluster domain"},{"location":"install/#installation-namespace","text":"Maesh does not need to be installed into the maesh namespace, but it does need to be installed into its own namespace, separate from user namespaces.","title":"Installation namespace"},{"location":"install/#usage","text":"To use maesh, instead of referencing services via their normal <servicename>.<namespace> , instead use <servicename>.<namespace>.maesh . This will access the maesh service mesh, and will allow you to route requests through maesh. By default, maesh is opt-in, meaning you have to use the maesh service names to access the mesh, so you can have some services running through the mesh, and some services not.","title":"Usage"},{"location":"quickstart/","text":"Quickstart \u00b6 Maesh can be installed in your cluster without affecting any running services. It will safely install itself via the helm chart, and will be ready for use immediately after. It can be installed by running: helm repo add maesh https://containous.github.io/maesh/charts helm repo update helm install --name=maesh --namespace=maesh maesh/maesh RBAC \u00b6 Depending on the tool you used to deploy your cluster you might need to tweak RBAC permissions. kubeadm \u00b6 If you used kubeadm to deploy your cluster, a fast way to allow the helm installation to perform all steps it needs is to edit the cluster-admin ClusterRoleBinding , adding the following to the subjects section: - kind: ServiceAccount name: default namespace: kube-system Assuming tiller is deployed in your kube-system namespace, this will give it very open permissions.","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"Maesh can be installed in your cluster without affecting any running services. It will safely install itself via the helm chart, and will be ready for use immediately after. It can be installed by running: helm repo add maesh https://containous.github.io/maesh/charts helm repo update helm install --name=maesh --namespace=maesh maesh/maesh","title":"Quickstart"},{"location":"quickstart/#rbac","text":"Depending on the tool you used to deploy your cluster you might need to tweak RBAC permissions.","title":"RBAC"},{"location":"quickstart/#kubeadm","text":"If you used kubeadm to deploy your cluster, a fast way to allow the helm installation to perform all steps it needs is to edit the cluster-admin ClusterRoleBinding , adding the following to the subjects section: - kind: ServiceAccount name: default namespace: kube-system Assuming tiller is deployed in your kube-system namespace, this will give it very open permissions.","title":"kubeadm"}]}